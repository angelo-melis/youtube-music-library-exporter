#!/usr/bin/env php
<?php

declare(strict_types=1);

ini_set('memory_limit', -1);

use Symfony\Component\DomCrawler\Crawler;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;

require_once __DIR__.DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php';

(new SingleCommandApplication())
    ->setVersion('0.1.0')
    ->addOption('html-file', null, InputOption::VALUE_REQUIRED, 'Path to the HTML file', '.'.DIRECTORY_SEPARATOR.'YouTube Music.html')
    ->addOption('playlist-file', null, InputOption::VALUE_REQUIRED, 'Path to the playlist.txt file', '.'.DIRECTORY_SEPARATOR.'playlist.txt')
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $io = new SymfonyStyle($input, $output);
        $io->title('YouTube Music Upload Playlist Extractor');

        $htmlFile = $input->getOption('html-file');
        $playlistFile = $input->getOption('playlist-file');

        if (!file_exists($htmlFile)) {
            $io->error('html-file not found');

            return Command::INVALID;
        }

        $io->text(sprintf('Will extract %s from %s:', $playlistFile, $htmlFile));

        $crawler = (new Crawler(file_get_contents($htmlFile)))->filter('ytmusic-responsive-list-item-renderer');
        
        $progressBar = new ProgressBar($output);
        $progressBar->setFormat('verbose');
        $progressBar->start($crawler->count());

        $data = $crawler->each(function (Crawler $node) use ($progressBar) {
            if (!$node || !\count($node->filter('.title a'))) {
                $progressBar->advance();
                return;
            }

            $progressBar->advance();

            return sprintf(
                '%s by %s',
                $node->filter('.title a')->text(),
                $node->filter('.secondary-flex-columns')->children()->eq(0)->text()
            );
        });

        file_put_contents($playlistFile, implode(PHP_EOL, $data));

        $progressBar->finish();
        $io->newLine();
        $io->success('done');

        return Command::SUCCESS;
    })
    ->run();
